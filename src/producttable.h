

/**
 * @file producttable.h
 * @brief Header for the ProductTable class.
 * 
 * @authors Marc Dinh, Stephan Fischer
 */


// Multiple include protection
//
#ifndef PRODUCT_TABLE_H
#define PRODUCT_TABLE_H

// ==================
//  General Includes
// ==================
//
#include <map> // std::map

// ======================
//  Forward declarations
// ======================
//
#include "forwarddeclarations.h"
#include "simulatorinput.h"

/**
 * @brief Class storing position to product associations.
 *
 * ProductTable stores (start,end) to ChemicalSequence associations.
 * The idea is that a sequence can be build from a template starting
 * at start position and ending at end.
 */
class ProductTable : public SimulatorInput
{
 public:

  // ==========================
  //  Constructors/Destructors
  // ==========================
  //
  /**
   * @brief Constructor from TransformationTable.
   */
  ProductTable (const TransformationTable& transformation_table);

  // Not needed for this class (use of default copy constructor) !
  // /*
  //  * @brief Copy constructor.
  //  */
  // ProductTable (const ProductTable& other_product_table);

  /**
   * @brief Destructor.
   */
  ~ProductTable (void);

  // ===========================
  //  Public Methods - Commands
  // ===========================
  //
  /**
   * @brief Add a new (start,end) to Chemicalsequence association.
   * @param parent Template sequence.
   * @param first Starting position on template.
   * @param last Ending position on template.
   * @param product ChemicalSequence generated by synthesizing
   *  from template from start to end.
   */
  void add (const ChemicalSequence& parent, int first, int last,
	    ChemicalSequence& product);

  /**
   * @brief Generate child sequence from parent.
   * @param parent Template sequence.
   * @param first Starting position on template.
   * @param last Ending position on template.
   * @return Sequence generated from template.
   */
  std::string generate_child_sequence (ChemicalSequence& parent,
				       int first, int last) const;

  // ============================
  //  Public Methods - Accessors
  // ============================
  //
  /**
   * @brief Accessor to product given start and end position.
   * @param parent Template sequence.
   * @param first Starting position on template.
   * @param last Ending position on template.
   * @return ChemicalSequence generated by synthesizing
   *  from template from start to end.
   */
  ChemicalSequence* product (const ChemicalSequence& parent,
			     int first, int last) const;

  // ==========================
  //  Public Methods - Setters
  // ==========================
  //


  // =======================================
  //  Public Methods - Operator overloading
  // =======================================
  //
  // Not needed for this class (use of default overloading) !
  // /*
  //  * @brief Assignment operator.
  //  */
  // ProductTable& operator= (const ProductTable& other_product_table);

protected:
  // ======================
  //  Protected Attributes
  // ======================
  //

  // ===================
  //  Protected Methods
  // ===================
  //


private:

  // ============
  //  Attributes
  // ============
  //  
  /** @brief TransformationTable giving child sequence from parent sequence. */
  const TransformationTable& _transformation_table;


  typedef std::map<int, ChemicalSequence*> EndMap;
  typedef std::map<int, EndMap> StartMap;
  typedef std::map<const ChemicalSequence*, StartMap> ParentMap;  

  /** @brief Map storing the products given parent, starting and ending positions. */
  ParentMap _products;

  // =================
  //  Private Methods
  // =================
  //

  // ======================
  //  Forbidden Operations
  // ======================
  //

};

// ======================
//  Inline declarations
// ======================
//
#include "transformationtable.h"
#include "chemicalsequence.h"

inline void ProductTable::add (const ChemicalSequence& parent,
			       int first, int last, ChemicalSequence& product)
{
  _products [&parent][first][last] = &product;
}

inline std::string
ProductTable::generate_child_sequence (ChemicalSequence& parent,
				       int first, int last) const
{
  return _transformation_table.transform (parent.sequence (first, last));
}


#endif // PRODUCT_TABLE_H
