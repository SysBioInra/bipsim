

/**
 * @file producttable.h
 * @brief Header for the ProductTable class.
 * 
 * @authors Marc Dinh, Stephan Fischer
 */


// Multiple include protection
//
#ifndef PRODUCT_TABLE_H
#define PRODUCT_TABLE_H

// ==================
//  General Includes
// ==================
//
#include <map> // std::map

// ======================
//  Forward declarations
// ======================
//
#include "forwarddeclarations.h"

/**
 * @brief Class storing position to product associations.
 *
 * ProductTable stores (start,end) to ChemicalSequence associations.
 * The idea is that a sequence can be build from a template starting
 * at start position and ending at end.
 */
class ProductTable
{
 public:

  // ==========================
  //  Constructors/Destructors
  // ==========================
  //
  /**
   * @brief Default constructor.
   */
  ProductTable (void);

  // Not needed for this class (use of default copy constructor) !
  // /*
  //  * @brief Copy constructor.
  //  */
  // ProductTable (const ProductTable& other_product_table);

  /**
   * @brief Destructor.
   */
  ~ProductTable (void);

  // ===========================
  //  Public Methods - Commands
  // ===========================
  //
  /**
   * @brief Add a new (start,end) to Chemicalsequence association.
   * @param start Starting position on template.
   * @param end Ending position on template.
   * @param product ChemicalSequence generated by synthesizing
   *  from template from start to end.
   */
  void add (int start, int end, ChemicalSequence& product);

  // ============================
  //  Public Methods - Accessors
  // ============================
  //
  /**
   * @brief Accessor to product given start and end position.
   * @param start Starting position on template.
   * @param end Ending position on template.
   * @return ChemicalSequence generated by synthesizing
   *  from template from start to end.
   */
  ChemicalSequence* product (int start, int end) const;

  // ==========================
  //  Public Methods - Setters
  // ==========================
  //


  // =======================================
  //  Public Methods - Operator overloading
  // =======================================
  //
  // Not needed for this class (use of default overloading) !
  // /*
  //  * @brief Assignment operator.
  //  */
  // ProductTable& operator= (const ProductTable& other_product_table);

protected:
  // ======================
  //  Protected Attributes
  // ======================
  //

  // ===================
  //  Protected Methods
  // ===================
  //


private:

  // ============
  //  Attributes
  // ============
  //  
  /** @brief Map storing the products given starting and ending positions. */
  std::map <int, std::map<int, ChemicalSequence*> > _products;

  // =================
  //  Private Methods
  // =================
  //

  // ======================
  //  Forbidden Operations
  // ======================
  //

};

// ======================
//  Inline declarations
// ======================
//
inline ProductTable::ProductTable (void) {}
inline ProductTable::~ProductTable (void) {}

inline void ProductTable::add (int start, int end, ChemicalSequence& product)
{
  _products [start][end] = &product;
}

inline ChemicalSequence* ProductTable::product (int start, int end) const
{
  std::map <int, std::map<int, ChemicalSequence*> >::const_iterator s_it = _products.find (start);
  if (s_it == _products.end()) return 0;

  std::map <int, ChemicalSequence*>::const_iterator e_it = (s_it->second).find (end);
  if (e_it == (s_it->second).end()) return 0;

  return e_it->second;
}

#endif // PRODUCT_TABLE_H
