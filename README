BiPSim: stochastic simulation of cell processes
===================================================

A Gillespie-based simulator used to simulate biological processes
stochastically on a molecular level.


Getting Started
---------------

These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.

### Prerequisites

You need a UNIX system running autoconf to install this software. Recent [boost](http://boost.org/) libraries are highly recommended.

### Installing

When in the main repository run the following commands:

```
./configure
make
```

If boost is not installed on your system, consider running (not recommended):

```
./configure --disable-boost
make
```

You can also install boost by following our recommandations below
(see 'Install Boost' section).

You can make installation system-wide by running (not necessary)

```
sudo make install
```
You may also try reading the [INSTALL](INSTALL) file for more advanced uses (this is a file that comes with autoconf, we did not write it).

### Running

Once you have setup your parameter file and reactions files, run

```
src/bipsim path/to/params.in
```

If you do not run the program from the build directory, do not forget to
add the full path to `src/bipsim`.
If you made installation system-wide, you may simply run

```
bipsim path/to/params.in
```

For example, you can use the data provided in sample for your first run:

```
cd sample
../src/bipsim input/params.in
```

See sample/README for further information about files needed to setup a simulation.

4 output files are generated in `sample/output`
 - params.out: parameters used for simulation.
 - chemicals.out: number of some chemicals over time.
 - reactions.out: most popular reactions in the sytem over time.
 - chromosome.out: evolution of double strand synthesis over time.


Running tests
-------------

A couple of unit and integration tests are provided. In order to run them,
you need to reconfigure the package:

```
./configure --enable-unit-tests --enable-integration-tests
make check
```


Documentation
-------------

You can generate technical documentation using Doxygen by running

```
doxygen doxygen.in
```

Once documentation was generated, an HTML version is accessible by
opening

```
doc/html/index.html
```

Alternatively, a Latex version can be generated:

```
cd doc/latex
make
```

which generates the `refman.pdf` product with `doc/latex`.


Install Boost
-------------

Download the latest boost archive from http://boost.org. Execute

```
tar --bzip2 -xf /path/to/boost_1_65_1.tar.bz2
```

BipSim only uses the `random` and `test` libraries from boost.
To shorten installation time, we recommend installing only these libraries:

```
cd path/to/boost_1_65_1
./bootstrap.sh --with-libraries=random,test
sudo ./b2 install
```

If you prefer using Boost locally, run
```
cd path/to/boost_1_65_1
./bootstrap.sh --with-libraries=test,random,python
./b2
```

*With a local installation*, when running configure, you need to specify
the path to the local installation
```
cd path/to/bipsim
./configure BOOST_ROOT=path/to/boost_1_65_1 LDFLAGS="-Wl,-R,path/to/boost_1_65_1/stage/lib"
```

If you are an expert and know of a better way to deal with a local boost
installation, please let us know ;)


Built With
----------

* [boost](http://boost.org/) - random numbers, unit tests.
* [autoconf](http://gnu.org/software/autoconf/) - automated building.


Authors
-------

* Marc Dinh, Stephan Fischer: implementation, theoretical background.
* Vincent Fromion, Anne Goelzer, Vincent Henry: theoretical background.


License
-------

This project is licensed under the GPLv3 License - see the [COPYING](COPYING) file for details.


Acknowledgments
---------------
